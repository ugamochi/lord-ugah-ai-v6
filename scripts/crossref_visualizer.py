"""
Lord-Ugah-AI-v6 Cross-Reference Visualizer

This script scans all notes/Ugahbases for crossrefs and generates a Markdown table of connections.
Outputs the table to meta/cross-reference-map.md.
"""
import os
import re
from glob import glob

SCRIPT_DIR = os.path.dirname(os.path.abspath(__file__))
PROJECT_ROOT = os.path.abspath(os.path.join(SCRIPT_DIR, ".."))
UGAHBASES_DIR = os.path.join(PROJECT_ROOT, "ugahbases")
META_DIR = os.path.join(PROJECT_ROOT, "meta")
OUTPUT_PATH = os.path.join(META_DIR, "cross-reference-map.md")
CROSSREF_PATTERN = re.compile(r'crossrefs:\s*\[(.*?)\]', re.DOTALL)


def get_note_files():
    """Return a list of all markdown note files in Ugahbases."""
    return glob(os.path.join(UGAHBASES_DIR, "**", "*.md"), recursive=True)


def extract_crossrefs(md_path):
    """Extract crossrefs from a markdown file."""
    with open(md_path, "r") as f:
        content = f.read()
    match = CROSSREF_PATTERN.search(content)
    if not match:
        return []
    refs = match.group(1)
    return [r.strip().strip('"\'') for r in refs.split(",") if r.strip()]


def build_crossref_table():
    """Build a Markdown table of all cross-references."""
    notes = get_note_files()
    rows = ["| Source Note | Cross-References |\n", "|---|---|\n"]
    for note in notes:
        rel_note = os.path.relpath(note, UGAHBASES_DIR)
        refs = extract_crossrefs(note)
        if refs:
            rows.append(f"| {rel_note} | {', '.join(refs)} |\n")
    return rows


def write_table(rows):
    os.makedirs(META_DIR, exist_ok=True)
    with open(OUTPUT_PATH, "w") as f:
        f.write("# Cross-Reference Map (Auto-Generated)\n\n")
        f.writelines(rows)
        f.write("\n---\n\n*This table is auto-generated by scripts/crossref_visualizer.py.*\n")


def main():
    rows = build_crossref_table()
    write_table(rows)
    print(f"Cross-reference map written to {OUTPUT_PATH}")


if __name__ == "__main__":
    main() 